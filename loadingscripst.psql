
---------------------------------------------------------------------------
-- PLATINUMS
-------------------------------------------------------------------------


-- platinumbodies
\COPY platinumbodies FROM 'C:\Users\micha\cvsPyReaders\data\output\platinumbodies.cvs' DELIMITER ','  CSV HEADER;

-- platinums
-- put into temp table 

create temporary table platinumstemp (cusip varchar, name varchar , type varchar, issuedate integer, maturitydate integer, originalface double precision);
\COPY platinumstemp FROM 'C:\Users\micha\cvsPyReaders\data\output\platinums.cvs' DELIMITER ',' CSV HEADER;

-- Just checking that everything is equal works A OK :) 
-- SELECT COUNT(*)
-- FROM platinums
-- INNER JOIN platinumstemp
-- ON platinums.cusip = platinumstemp.cusip
-- WHERE platinums.name = platinumstemp.name
-- AND platinums.name = platinumstemp.name
-- AND platinums.type = platinumstemp.type
-- AND platinums.issuedate = platinumstemp.issuedate
-- AND platinums.maturitydate = platinumstemp.maturitydate
-- AND platinums.originalface = platinumstemp.originalface;

-- SEEMS to work 

INSERT INTO platinums (cusip, name, type, issuedate, maturitydate, originalface)
SELECT cusip, name, type, issuedate, maturitydate, originalface
FROM platinumstemp
ON CONFLICT (cusip)
DO NOTHING;

DROP TABLE platinumstemp;


-- fake platinums on the 6th business day 
--  we just need cusip, interestrate and date
-- but I am setting remainingbalance, factor, gwac, wam, and wala all to zero null would probably be fine but not sure but we can set them to zero 

SELECT 
    cusip,
    interestrate
INTO TEMP TABLE platinumbodiestemp
FROM platinumbodies
WHERE date = '2021-11-01';

-- put them into platinum bodies
INSERT INTO platinumbodies (cusip, interestrate, remainingbalance, factor, gwac, wam, wala, date )
SELECT cusip, interestrate, 0, 0, 0, 0, 0, '2021-12-01' 
FROM platinumbodiestemp;

DROP TABLE platinumbodiestemp;

-- Seems to work 


---------------------------------------------------------------------------
-- POOLS
-------------------------------------------------------------------------

-- pool bodies
\COPY poolbodies FROM 'C:\Users\micha\cvsPyReaders\data\output\poolbodies.cvs' DELIMITER ','  CSV HEADER;

create temporary table poolstemp (cusip varchar, name varchar , indicator varchar, type varchar, issuedate integer, maturitydate integer, originalface double precision, istbaelig boolean);

\COPY poolstemp FROM 'C:\Users\micha\cvsPyReaders\data\output\pools.cvs' DELIMITER ',' CSV HEADER;

-- Just checking that everything is equal works A OK :) 
-- SELECT COUNT(*)
-- FROM pools
-- INNER JOIN poolstemp
-- ON pools.cusip = poolstemp.cusip
-- WHERE pools.name = poolstemp.name
-- AND pools.indicator = poolstemp.indicator
-- AND pools.type = poolstemp.type
-- AND pools.issuedate = poolstemp.issuedate
-- AND pools.maturitydate = poolstemp.maturitydate
-- AND pools.originalface = poolstemp.originalface
-- AND pools.istbaelig = poolstemp.istbaelig;

-- SEEMS to work 

INSERT INTO pools (cusip, name, indicator, type, issuedate, maturitydate, originalface, istbaelig)
SELECT cusip, name, indicator, type, issuedate, maturitydate, originalface, istbaelig
FROM poolstemp
ON CONFLICT (cusip)
DO NOTHING;

DROP TABLE poolstemp;


---------------------------------------------------------------------------
-- FEDS
-------------------------------------------------------------------------


\COPY fedholdings FROM 'C:\Users\micha\cvsPyReaders\data\output\fed.cvs' DELIMITER ','  CSV HEADER;

create temporary table fedstemp (asofdate date, cusip varchar, currentfacevalue double precision, isaggregated boolean);

\COPY fedstemp FROM 'C:\Users\micha\cvsPyReaders\data\output\fed.cvs' DELIMITER ',' CSV HEADER;

-- Just checking that everything is equal works A OK :) 
SELECT COUNT(*)
FROM fedholdings
INNER JOIN fedstemp
ON fedholdings.cusip = fedstemp.cusip
AND fedholdings.asofdate = fedstemp.asofdate        
WHERE fedholdings.currentfacevalue = fedstemp.currentfacevalue
AND fedholdings.isaggregated = fedstemp.isaggregated;

-- SEEMS to work 

DROP TABLE fedstemp;


---------------------------------------------------------------------------
-- CMOS
-------------------------------------------------------------------------

-- make a temp table 
create temporary table cmostemp (cmo varchar, cusip varchar, faceincmo double precision, date date);

-- read in data into temp table
\COPY cmostemp FROM 'C:\Users\micha\cvsPyReaders\data\output\cmos.cvs' DELIMITER ','  CSV HEADER;

-- transfer to real table, id will self increment which is nifty 
INSERT INTO ofincmos(cmo, cusip, faceincmo, date)
SELECT cmo, cusip, faceincmo, date
FROM cmostemp;


-- checking
SELECT *
FROM ofincmos
INNER JOIN cmostemp
ON ofincmos.cmo = cmostemp.cmo
AND ofincmos.cusip = cmostemp.cusip        
AND ofincmos.faceincmo = cmostemp.faceincmo
AND ofincmos.date = cmostemp.date
WHERE ofincmos.cmo = '2021-214-5';

-- SEEMS to work but I am getting 20 more maybe those are the, think it is ok 
-- we just have have 5 entries that are exactly the same so when we join we get 25 instead of 5 hence 20 more

SELECT 
    cmo, 
    COUNT(*)
FROM ofincmos
WHERE date = '2021-12-01'
GROUP BY cmo, cusip, faceincmo, date
HAVING COUNT(*) > 1;


DROP TABLE cmostemp;


---------------------------------------------------------------------------
-- PLATCOLLS
-------------------------------------------------------------------------

-- make a temp table 
create temporary table platcollstemp (cusip varchar, poolname varchar, indicator varchar, faceinplatinum double precision, active varchar, date date);



-- read in data into temp table
\COPY platcollstemp FROM 'C:\Users\micha\cvsPyReaders\data\output\platcolls.cvs' DELIMITER ','  CSV HEADER;


-- so this would work if they were all new kind of


-- it's brand new so we can insert it but we need to make sure it was not born and died on the same month
-- I don't know if this can happen but needs to be checked for, I could just check after they are inserted.. if there are any that are terminated and have no 
-- termination date just set the current date to terminated.. could work

INSERT INTO platcolls(cusip, poolname, indicator, faceinplatinum, active, born)
SELECT cusip, poolname, indicator, faceinplatinum, active, date
FROM platcollstemp
ON CONFLICT DO NOTHING;

-- so above should insert any new ones in 

-- Then I could write something else to make sure none where treminated without a termination date 

SELECT *
FROM platcolls
WHERE active = 'T'
AND terminated IS NULL;

-- That would at least show them to me 
-- then there would be more magic to update them 


-- it's already in there and it's already terminated we should just be able to ignore it.  I don't think they can come back from the dead

-- it's already in there active and still actice ignore nothing changed

-- The above two scenarios nothing needs to be done for 


-- it's already in there and has changed from active to terminated, need to change the actiive  column and the the termonated date..

-- could probably do a lot of this with temp tables 

SELECT * 
FROM platcolls
INNER JOIN platcollstemp
ON platcolls.cusip = platcollstemp.cusip
AND platcolls.poolname = platcollstemp.poolname
AND platcolls.indicator = platcollstemp.indicator
WHERE platcolls.active = 'A'
AND platcollstemp.actice = 'T'

-- So this should get me the ones that need to be changed.. can probably put them in a temp table and update them from there  

DROP table platcollstemp


------------------

-- testing

create temporary table fakeplatcolls (cusip varchar, poolname varchar, indicator varchar, faceinplatinum double precision, active varchar, born date, terminated date);

INSERT INTO fakeplatcolls(cusip, poolname, indicator, faceinplatinum, active, born)
SELECT cusip, poolname, indicator, faceinplatinum, active, date
FROM platcollstemp
ON CONFLICT DO NOTHING;

SELECT *
FROM fakeplatcolls
WHERE active = 'T'
-- AND terminated IS NULL
LIMIT 10;

UPDATE fakeplatcolls
SET terminated = born
WHERE active = 'T'
AND terminated IS NULL;

-- So the above seems to work just fine 

--  need to load in another month before i can check for updating from actice to terminated not sure 
-- if I want to do it now 

